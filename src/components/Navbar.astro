---
import { Icon } from "astro-icon/components";
import DisplaySettings from "./widget/DisplaySettings.svelte";
import { LinkPreset, type NavBarLink } from "../types/config";
import { navBarConfig, siteConfig } from "../config";
import NavMenuPanel from "./widget/NavMenuPanel.astro";
import Search from "./Search.svelte";
import { LinkPresets } from "../constants/link-presets";
import LightDarkSwitch from "./LightDarkSwitch.svelte";
import { url } from "../utils/url-utils";
const className = Astro.props.class;

let links: NavBarLink[] = navBarConfig.links.map((item: NavBarLink | LinkPreset): NavBarLink => {
  if (typeof item === "number") {
    return LinkPresets[item];
  }
  return item;
});
---

<div class="z-50 onload-animation" id="navbar">
  <div class="absolute h-8 left-0 right-0 -top-8 bg-[var(--card-bg)] transition"></div>
  <!-- used for onload animation -->
  <div
    class:list={[
      className,
      "card-base !overflow-visible max-w-[var(--page-width)] h-[4.5rem] !rounded-t-none mx-auto flex items-center justify-between px-4",
    ]}
  >
    <a class="btn-plain scale-animation rounded-lg h-[3.25rem] px-5 font-bold active:scale-95" href={url("/")}>
      <div class="flex flex-row text-[var(--primary)] items-center text-md">
        <Icon class="text-[1.75rem] mb-1 mr-2" name="material-symbols:home-outline-rounded" />
        {siteConfig.title}
      </div>
    </a>
    <div class="hidden md:flex">
      {
        links.map((l) => {
          return (
            <a
              aria-label={l.name}
              class="btn-plain scale-animation rounded-lg h-11 font-bold px-5 active:scale-95"
              href={l.external ? l.url : url(l.url)}
              target={l.external ? "_blank" : null}
            >
              <div class="flex items-center">
                {l.name}
                {l.external && (
                  <Icon
                    class="text-[0.875rem] transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]"
                    name="fa6-solid:arrow-up-right-from-square"
                  />
                )}
              </div>
            </a>
          );
        })
      }
    </div>
    <div class="flex">
      <!--<SearchPanel client:load>-->
      <Search client:only="svelte" />
      {
        !siteConfig.themeColor.fixed && (
          <button
            aria-label="Display Settings"
            class="btn-plain scale-animation rounded-lg h-11 w-11 active:scale-90"
            id="display-settings-switch"
          >
            <Icon class="text-[1.25rem]" name="material-symbols:palette-outline" />
          </button>
        )
      }
      <LightDarkSwitch client:only="svelte" />
      <button
        aria-label="Menu"
        class="btn-plain scale-animation rounded-lg w-11 h-11 active:scale-90 md:!hidden"
        id="nav-menu-switch"
        name="Nav Menu"
      >
        <Icon class="text-[1.25rem]" name="material-symbols:menu-rounded" />
      </button>
    </div>
    <NavMenuPanel links={links} />
    <DisplaySettings client:only="svelte" />
  </div>
</div>

<script>
  function switchTheme() {
    if (localStorage.theme === "dark") {
      document.documentElement.classList.remove("dark");
      localStorage.theme = "light";
    } else {
      document.documentElement.classList.add("dark");
      localStorage.theme = "dark";
    }
  }

  function loadButtonScript() {
    const switchBtn = document.getElementById("scheme-switch");
    if (switchBtn) {
      switchBtn.addEventListener("click", function () {
        switchTheme();
      });
    }

    const settingBtn = document.getElementById("display-settings-switch");
    if (settingBtn) {
      settingBtn.addEventListener("click", function () {
        const settingPanel = document.getElementById("display-setting");
        if (settingPanel) {
          settingPanel.classList.toggle("float-panel-closed");
        }
      });
    }

    const menuBtn = document.getElementById("nav-menu-switch");
    if (menuBtn) {
      menuBtn.addEventListener("click", function () {
        const menuPanel = document.getElementById("nav-menu-panel");
        if (menuPanel) {
          menuPanel.classList.toggle("float-panel-closed");
        }
      });
    }
  }

  loadButtonScript();
</script>

<script define:vars={{ scriptUrl: url("/pagefind/pagefind.js"), isProd: import.meta.env.PROD }} is:inline>
  async function loadPagefind() {
    const pagefind = await import(scriptUrl);
    await pagefind.options({
      excerptLength: 20,
    });
    pagefind.init();
    window.pagefind = pagefind;
    pagefind.search(""); // speed up the first search
  }

  if (isProd) {
    loadPagefind();
  }
</script>
