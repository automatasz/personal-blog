---
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";

import { profileConfig, siteConfig } from "@/config";
import ConfigCarrier from "@components/ConfigCarrier.astro";
import {
  AUTO_MODE,
  BANNER_HEIGHT_EXTEND,
  BANNER_HEIGHT_HOME,
  DARK_MODE,
  DEFAULT_THEME,
  LIGHT_MODE,
  PAGE_WIDTH,
} from "../constants/constants";
import { defaultFavicons } from "@/constants/icon";
import type { Favicon } from "@/types/config";
import { url, pathsEqual } from "@utils/url-utils";
import "katex/dist/katex.css";
import "@/styles/global.css";
import PostHog from "@components/PostHog.astro";

interface Props {
  title?: string;
  banner?: string;
  description?: string;
  lang?: string;
  setOGTypeArticle?: boolean;
}

let { title, banner, description, lang, setOGTypeArticle } = Astro.props;

// apply a class to the body element to decide the height of the banner, only used for initial page load
// Swup can update the body for each page visit, but it's after the page transition, causing a delay for banner height change
// so use Swup hooks instead to change the height immediately when a link is clicked
const isHomePage = pathsEqual(Astro.url.pathname, url("/"));

// defines global css variables
// why doing this in Layout instead of GlobalStyles: https://github.com/withastro/astro/issues/6728#issuecomment-1502203757
const configHue = siteConfig.themeColor.hue;
if (!banner || typeof banner !== "string" || banner.trim() === "") {
  banner = siteConfig.banner.src;
}

// TODO don't use post cover as banner for now
banner = siteConfig.banner.src;

const enableBanner = siteConfig.banner.enable;

let pageTitle: string;
if (title) {
  pageTitle = `${title} - ${siteConfig.title}`;
} else {
  pageTitle = `${siteConfig.title} - ${siteConfig.subtitle}`;
}

const favicons: Favicon[] = siteConfig.favicon.length > 0 ? siteConfig.favicon : defaultFavicons;

// const siteLang = siteConfig.lang.replace('_', '-')
if (!lang) {
  lang = `${siteConfig.lang}`;
}
const siteLang = lang.replace("_", "-");

const bannerOffsetByPosition = {
  top: `${BANNER_HEIGHT_EXTEND}vh`,
  center: `${BANNER_HEIGHT_EXTEND / 2}vh`,
  bottom: "0",
};
const bannerOffset = bannerOffsetByPosition[siteConfig.banner.position || "center"];
---

<!doctype html>
<html
  class="bg-[var(--page-bg)] transition text-[14px] md:text-[16px]"
  data-overlayscrollbars-initialize
  lang={siteLang}
>
  <head>
    <title>{pageTitle}</title>

    <meta charset="UTF-8" />
    <meta content={description || pageTitle} name="description" />
    <meta content={profileConfig.name} name="author" />

    <meta content={siteConfig.title} property="og:site_name" />
    <meta content={Astro.url} property="og:url" />
    <meta content={pageTitle} property="og:title" />
    <meta content={description || pageTitle} property="og:description" />
    {setOGTypeArticle ? <meta content="article" property="og:type" /> : <meta content="website" property="og:type" />}

    <meta content="summary_large_image" name="twitter:card" />
    <meta content={Astro.url} property="twitter:url" />
    <meta content={pageTitle} name="twitter:title" />
    <meta content={description || pageTitle} name="twitter:description" />

    <meta content="width=device-width" name="viewport" />
    <meta content={Astro.generator} name="generator" />
    {
      favicons.map((favicon) => (
        <link
          href={favicon.src.startsWith("/") ? url(favicon.src) : favicon.src}
          media={favicon.theme && `(prefers-color-scheme: ${favicon.theme})`}
          rel="icon"
          sizes={favicon.sizes}
        />
      ))
    }

    <!-- Set the theme before the page is rendered to avoid a flash -->
    <script define:vars={{ DEFAULT_THEME, LIGHT_MODE, DARK_MODE, AUTO_MODE, BANNER_HEIGHT_EXTEND, configHue }} is:inline
    >
      // Load the theme from local storage
      const theme = localStorage.getItem("theme") || DEFAULT_THEME;
      switch (theme) {
        case LIGHT_MODE:
          document.documentElement.classList.remove("dark");
          break;
        case DARK_MODE:
          document.documentElement.classList.add("dark");
          break;
        case AUTO_MODE:
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            document.documentElement.classList.add("dark");
          } else {
            document.documentElement.classList.remove("dark");
          }
      }

      // Load the hue from local storage
      const hue = localStorage.getItem("hue") || configHue;
      document.documentElement.style.setProperty("--hue", hue);

      // calculate the --banner-height-extend, which needs to be a multiple of 4 to avoid blurry text
      let offset = Math.floor(window.innerHeight * (BANNER_HEIGHT_EXTEND / 100));
      offset = offset - (offset % 4);
      document.documentElement.style.setProperty("--banner-height-extend", `${offset}px`);
    </script>
    <style
      define:vars={{
        configHue,
        "page-width": `${PAGE_WIDTH}rem`,
      }}
    ></style>
    <!-- defines global css variables. This will be applied to <html> <body> and some other elements idk why -->

    <slot name="head" />
    <PostHog />
    <link href={`${Astro.site}rss.xml`} rel="alternate" title={profileConfig.name} type="application/rss+xml" />
  </head>
  <body
    class="min-h-screen transition"
    class:list={[{ "lg:is-home": isHomePage, "enable-banner": enableBanner }]}
    data-overlayscrollbars-initialize
  >
    <ConfigCarrier />
    <slot />

    <!-- increase the page height during page transition to prevent the scrolling animation from jumping -->
    <div class="hidden h-[300vh]" id="page-height-extend"></div>
  </body>
</html>

<style
  define:vars={{
    bannerOffset,
    "banner-height-home": `${BANNER_HEIGHT_HOME}vh`,
  }}
  is:global
>
  @tailwind components;
  @layer components {
    .enable-banner.is-home #banner-wrapper {
      @apply h-[var(--banner-height-home)] translate-y-[var(--banner-height-extend)];
    }
    .enable-banner #banner-wrapper {
      @apply h-[var(--banner-height-home)];
    }

    .enable-banner.is-home #banner {
      @apply h-[var(--banner-height-home)] translate-y-0;
    }
    .enable-banner #banner {
      @apply h-[var(--banner-height-home)] translate-y-[var(--bannerOffset)];
    }
    .enable-banner.is-home #main-grid {
      @apply translate-y-[var(--banner-height-extend)];
    }
    .enable-banner #top-row {
      @apply h-[calc(var(--banner-height-home)_-_4.5rem)] transition-all duration-300;
    }
    .enable-banner.is-home #sidebar-sticky {
      @apply top-[calc(1rem_-_var(--banner-height-extend))];
    }
    .navbar-hidden {
      @apply opacity-0 -translate-y-16;
    }
  }
</style>

<script>
  import "overlayscrollbars/overlayscrollbars.css";
  import { OverlayScrollbars } from "overlayscrollbars";
  import { getHue, getStoredTheme, setHue, setTheme } from "@utils/setting-utils";
  import { pathsEqual, url } from "@utils/url-utils";
  import {
    BANNER_HEIGHT,
    BANNER_HEIGHT_HOME,
    BANNER_HEIGHT_EXTEND,
    MAIN_PANEL_OVERLAPS_BANNER_HEIGHT,
  } from "@/constants/constants";
  import { HIDE_SIDEBAR_LINKS } from "@/constants/hide-sidebar-links";

  const bannerEnabled = !!document.getElementById("banner-wrapper");

  setClickOutsideToClose("display-setting", ["display-setting", "display-settings-switch"]);
  setClickOutsideToClose("nav-menu-panel", ["nav-menu-panel", "nav-menu-switch"]);
  setClickOutsideToClose("search-panel", ["search-panel", "search-bar", "search-switch"]);
  setClickOutsideToClose("my-account-panel", ["my-account-panel", "my-account-switch"]);

  // check show sidebar
  if (window.location.pathname && HIDE_SIDEBAR_LINKS.some((link) => window.location.pathname.includes(link))) {
    const sidebar = document.getElementById("sidebar");
    sidebar?.classList.add("sidebar-hide", "hidden");
    sidebar?.classList.add("onload-animation");
    const mainGrid = document.getElementById("main-grid");
    mainGrid?.classList.remove("grid-cols-[17.5rem_auto]");
    mainGrid?.classList.add("grid-cols-1");
  }

  // Load settings when entering the site
  init();

  if (window?.swup?.hooks) {
    setup();
  } else {
    document.addEventListener("swup:enable", setup);
  }

  const backToTopBtn = document.getElementById("back-to-top-btn");
  const toc = document.getElementById("toc-wrapper");
  const navbar = document.getElementById("navbar-wrapper");

  window.onscroll = scrollFunction;

  window.onresize = () => {
    // calculate the --banner-height-extend, which needs to be a multiple of 4 to avoid blurry text
    let offset = Math.floor(window.innerHeight * (BANNER_HEIGHT_EXTEND / 100));
    offset = offset - (offset % 4);
    document.documentElement.style.setProperty("--banner-height-extend", `${offset}px`);
  };

  function setClickOutsideToClose(panel: string, ignores: string[]) {
    document.addEventListener("click", (event) => {
      const panelDom = document.getElementById(panel);
      const tDom = event.target;
      if (!(tDom instanceof Node)) return; // Ensure the event target is an HTML Node
      for (const ig of ignores) {
        const ie = document.getElementById(ig);
        if (ie == tDom || ie?.contains(tDom)) {
          return;
        }
      }
      panelDom!.classList.add("float-panel-closed");
    });
  }

  function loadTheme() {
    const theme = getStoredTheme();
    setTheme(theme);
  }

  function loadHue() {
    setHue(getHue());
  }

  function initCustomScrollbar() {
    const bodyElement = document.querySelector("body");
    if (!bodyElement) return;
    OverlayScrollbars(
      // docs say that a initialization to the body element would affect native functionality like window.scrollTo
      // but just leave it here for now
      {
        target: bodyElement,
        cancel: {
          nativeScrollbarsOverlaid: true, // don't initialize the overlay scrollbar if there is a native one
        },
      },
      {
        scrollbars: {
          theme: "scrollbar-base scrollbar-auto py-1",
          autoHide: "move",
          autoHideDelay: 500,
          autoHideSuspend: false,
        },
      }
    );
    const preElements = document.querySelectorAll("pre");
    preElements.forEach((ele) => {
      OverlayScrollbars(ele, {
        scrollbars: {
          theme: "scrollbar-base scrollbar-dark px-2",
          autoHide: "leave",
          autoHideDelay: 500,
          autoHideSuspend: false,
        },
      });
    });
    const katexElements = document.querySelectorAll(".katex-display");
    katexElements.forEach((ele) => {
      OverlayScrollbars(ele as HTMLElement, {
        scrollbars: {
          theme: "scrollbar-base scrollbar-auto py-1",
        },
      });
    });
  }

  function showBanner() {
    const banner = document.getElementById("banner");
    if (!banner) {
      console.error("Failed to find the banner element");
      return;
    }
    banner.classList.remove("opacity-0", "scale-105");
  }

  function init() {
    // disableAnimation()()		// TODO
    loadTheme();
    loadHue();
    initCustomScrollbar();
    showBanner();
  }

  function setup() {
    window.swup.hooks.on("link:click", () => {
      // Remove the delay for the first time page load
      document.documentElement.style.setProperty("--content-delay", "0ms");

      // prevent elements from overlapping the navbar
      if (!bannerEnabled) {
        return;
      }
      const threshold = window.innerHeight * (BANNER_HEIGHT / 100) - 72 - 16;
      const navbar = document.getElementById("navbar-wrapper");
      if (!navbar || !document.body.classList.contains("lg:is-home")) {
        return;
      }
      if (document.body.scrollTop >= threshold || document.documentElement.scrollTop >= threshold) {
        navbar.classList.add("navbar-hidden");
      }
    });
    window.swup.hooks.on("content:replace", initCustomScrollbar);
    window.swup.hooks.on("visit:start", (visit: { to: { url: string } }) => {
      // change banner height immediately when a link is clicked
      const bodyElement = document.querySelector("body");
      if (pathsEqual(visit.to.url, url("/"))) {
        bodyElement!.classList.add("lg:is-home");
      } else {
        bodyElement!.classList.remove("lg:is-home");
      }

      // increase the page height during page transition to prevent the scrolling animation from jumping
      const heightExtend = document.getElementById("page-height-extend");
      if (heightExtend) {
        heightExtend.classList.remove("hidden");
      }

      // Hide the TOC while scrolling back to top
      const toc = document.getElementById("toc-wrapper");
      if (toc) {
        toc.classList.add("toc-not-ready");
      }
    });
    window.swup.hooks.on("page:view", () => {
      // hide the temp high element when the transition is done
      const heightExtend = document.getElementById("page-height-extend");
      if (heightExtend) {
        heightExtend.classList.remove("hidden");
      }
    });
    window.swup.hooks.on("visit:end", () => {
      setTimeout(() => {
        const heightExtend = document.getElementById("page-height-extend");
        if (heightExtend) {
          heightExtend.classList.add("hidden");
        }

        // Just make the transition looks better
        const toc = document.getElementById("toc-wrapper");
        if (toc) {
          toc.classList.remove("toc-not-ready");
        }
      }, 200);
    });
    window.swup.hooks.on("animation:out:start", (visit: { to: { url: string } }) => {
      const sidebar = document.getElementById("sidebar");
      if (!sidebar) {
        return;
      }

      if (!HIDE_SIDEBAR_LINKS.some((link) => visit.to.url.includes(link))) {
        sidebar.classList.remove("sidebar-hide", "hidden");
        sidebar.classList.add("onload-animation");
        return;
      }

      sidebar.classList.remove("onload-animation");
      sidebar.classList.add("sidebar-hide");
    });
    window.swup.hooks.on("animation:out:end", (visit: { to: { url: string } }) => {
      const mainGrid = document.getElementById("main-grid");
      if (!mainGrid) {
        return;
      }

      if (!HIDE_SIDEBAR_LINKS.some((link) => visit.to.url.includes(link))) {
        mainGrid.classList.remove("grid-cols-1");
        mainGrid.classList.add("grid-cols-[17.5rem_auto]");
        return;
      }

      mainGrid.classList.remove("grid-cols-[17.5rem_auto]");
      mainGrid.classList.add("grid-cols-1");
    });
  }

  function scrollFunction() {
    const bannerHeight = window.innerHeight * (BANNER_HEIGHT / 100);

    if (backToTopBtn) {
      if (document.body.scrollTop > bannerHeight || document.documentElement.scrollTop > bannerHeight) {
        backToTopBtn.classList.remove("hide");
      } else {
        backToTopBtn.classList.add("hide");
      }
    }

    if (bannerEnabled && toc) {
      if (document.body.scrollTop > bannerHeight || document.documentElement.scrollTop > bannerHeight) {
        toc.classList.remove("toc-hide");
      } else {
        toc.classList.add("toc-hide");
      }
    }

    if (!bannerEnabled) return;
    if (navbar) {
      const NAVBAR_HEIGHT = 72;
      const MAIN_PANEL_EXCESS_HEIGHT = MAIN_PANEL_OVERLAPS_BANNER_HEIGHT * 16; // The height the main panel overlaps the banner

      let bannerHeight = BANNER_HEIGHT;
      if (document.body.classList.contains("lg:is-home") && window.innerWidth >= 1024) {
        bannerHeight = BANNER_HEIGHT_HOME;
      }
      const threshold = window.innerHeight * (bannerHeight / 100) - NAVBAR_HEIGHT - MAIN_PANEL_EXCESS_HEIGHT - 16;
      if (document.body.scrollTop >= threshold || document.documentElement.scrollTop >= threshold) {
        navbar.classList.add("navbar-hidden");
      } else {
        navbar.classList.remove("navbar-hidden");
      }
    }
  }
</script>

<script>
  import PhotoSwipeLightbox from "photoswipe/lightbox";
  import "photoswipe/style.css";

  let lightbox: PhotoSwipeLightbox;
  const pswp = import("photoswipe");

  if (window.swup) {
    setup();
  } else {
    document.addEventListener("swup:enable", setup);
  }

  function createPhotoSwipe() {
    lightbox = new PhotoSwipeLightbox({
      gallery: ".custom-md img, #post-cover img",
      pswpModule: () => pswp,
      closeSVG:
        '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z"/></svg>',
      zoomSVG:
        '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M340-540h-40q-17 0-28.5-11.5T260-580q0-17 11.5-28.5T300-620h40v-40q0-17 11.5-28.5T380-700q17 0 28.5 11.5T420-660v40h40q17 0 28.5 11.5T500-580q0 17-11.5 28.5T460-540h-40v40q0 17-11.5 28.5T380-460q-17 0-28.5-11.5T340-500v-40Zm40 220q-109 0-184.5-75.5T120-580q0-109 75.5-184.5T380-840q109 0 184.5 75.5T640-580q0 44-14 83t-38 69l224 224q11 11 11 28t-11 28q-11 11-28 11t-28-11L532-372q-30 24-69 38t-83 14Zm0-80q75 0 127.5-52.5T560-580q0-75-52.5-127.5T380-760q-75 0-127.5 52.5T200-580q0 75 52.5 127.5T380-400Z"/></svg>',
      padding: { top: 20, bottom: 20, left: 20, right: 20 },
      wheelToZoom: true,
      arrowPrev: false,
      arrowNext: false,
      imageClickAction: "close",
      tapAction: "close",
      doubleTapAction: "zoom",
    });

    lightbox.addFilter("domItemData", (itemData, element) => {
      if (element instanceof HTMLImageElement) {
        itemData.src = element.src;

        itemData.w = Number(element.naturalWidth || window.innerWidth);
        itemData.h = Number(element.naturalHeight || window.innerHeight);

        itemData.msrc = element.src;
      }

      return itemData;
    });

    lightbox.init();
  }

  function setup() {
    if (!lightbox) {
      createPhotoSwipe();
    }
    window.swup.hooks.on("page:view", () => {
      createPhotoSwipe();
    });

    window.swup.hooks.on(
      "content:replace",
      () => {
        lightbox?.destroy?.();
      },
      { before: true }
    );
  }
</script>
